基于RBAC(Role-Based Access Control)的角色访问控制
对于TienChin项目的权限管理分为两个层次：
    1.对于数据权限的管理
        * 实现思路：使用自定义注解@DataScope+AOP实现
        * 数据库表结构：由五张表组成(sys_user sys_role sys_user_role sys_dept sys_role_dept)
        * 分别应用到部门管理的数据查询，角色管理的数据查询以及用户管理的数据查询
        * sys_role表中有data_scope字段，用来设置角色的数据权限范围。
        * 实现逻辑：通过一个前置通知，在目标方法执行之前，添加SQL条件，这些条件最终会被添加到Mapper层的SQL语句中，进而实现数据权限处理。
    2.对于操作权限(按钮权限)的管理
        * 实现思路：没有使用自定义注解@DataScope+AOP实现，但通过实现UserDetailsService接口的loadUserByUsername方法，去数据库中获取该用户拥有角色的操作权限中的perms字段值，
        然后在SecurityConfig中注入该接口，使用身份认证管理器 AuthenticationManager中的DaoAuthenticationProvider对象设置用户的操作权限范围；
        * 数据库表结构：同样由五张表组成(sys_user sys_role sys_user_role sys_menu sys_role_menu)
        * 通过Spring提供的权限注解@PreAuthorize在各各操作接口上使用
        * 例如用户管理中的添加用户权限的设置：@PreAuthorize("hasPermission('system:user:add')") 在spring容器中找到一个叫ss的bean，并给其hasPermi方法传一个'system:user:add'参数，
        如果有这个参数，注解返回true，权限通过，否则返回false，权限不通过。